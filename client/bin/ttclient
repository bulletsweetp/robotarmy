#!/usr/bin/perl
use strict;

#    ttclient - The Robot Army client code.
#
#    Copyright (C) 2009 H5 Technologies, Ira Woodhead
#    
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#  
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


use 5.006;
use strict;
use warnings;

use FileHandle;
use DBI;
use Digest::MD5 qw{ md5_hex };
use Compress::LZO;
use LWP::UserAgent;
use HTTP::Request;
#use Getopt::Long;
use POSIX 'setsid';
require 'lib/shared.pl';

my $scp = 'scp -q -o "ConnectTimeout 1"';
my $ssh = 'ssh -q -o "ConnectTimeout 1"';
my $rsync = 'rsync -a';

my %conf = readconf("conf/task.conf");
my ($thishost, $cpu) = @ARGV;
@ARGV = ();
daemonize( $thishost, $cpu );
setsvc( LWP::UserAgent->new, "http://$conf{master}:$conf{statusport}/ttstatus" );
setlog('>&STDERR', 0);


my $config = init(\%conf, $thishost, $cpu);
mainloop( %$config );
exit;


sub mainloop {
  my %c = @_;
  $c{lg}->(0, "starting with allowed tasks ". join(",",keys %{$c{priority}})."\n");
  while(1){
    my @tasks = freelist('task');
    last unless @tasks;
    @tasks = map { $_->[0] } @tasks;
    @tasks = grep { exists $c{priority}{$_} } @tasks;
    @tasks = sort { $c{priority}{$b} <=> $c{priority}{$a} } @tasks;
    my $task = '';
    while (@tasks){
      my $t = shift @tasks;
      my($free) = object_count($t);
      next unless $free;
      $task = $t;
    }
    unless ($task){
      my $sleepytime = int rand(6)+1;
      $c{lg}->(0, "no fertile tasks, sleeping $sleepytime\n");
      sleep $sleepytime;
      next;
    }
    $c{lg}->(0, "executing a '$task' task\n");
    $task = \&$task;
    $task->(@_);
  }
}

# ready all info needed by any possible task performed
sub init {
  my ( $conf, $thishost, $cpu ) = @_;
  my %conf         = %$conf;
  my %source       = exists $conf{source} ? %{ corpus( $conf{source} ) } : ();
  my %target       = %{ corpus( $conf{target} ) };
  my @crew         = @{ readlist("clusters/$conf{crew}/.hosts") };
  my $context      = "$conf{context}/$conf{proj}";
  my $localcontext = ( $conf{master} eq $thishost ) ? $conf{proj} : $context;

  my %priority = ( 
    killl   => 1,
    launch  => 1,
    crew    => 2,
    target  => 3,
    justmapsrc => 3,
    mappartsrc => 3,
    execute => 4,
    justmap => 4,
    mappart => 4, 
    reduce  => 4, 
  );

  # if this is the master host:
  # - just help with the infrastructure but don't execute any user code
  # - execution context is the original, so don't prefix it with a context repos
  if($conf{master} eq $thishost){
    delete $priority{execute};
    delete $priority{justmap};
    delete $priority{mappart};
    delete $priority{reduce};
    my $localcontext = $conf{proj};
  }

  my %c = (
    priority     => \%priority,
    crew         => \@crew,
    maps         => $conf{maps},
    thishost     => $thishost,
    mid_rs       => ( exists $conf{rs} ? $conf{rs} : '' ),
    context      => $context,
    localcontext => $localcontext,
    lg           => logger("$thishost($cpu)"),
    mapper       => $conf{mapcmd},
    partitioner  => ( $conf{partition} || 'partition' ),
    localfiles   => (exists $source{data} ? [ map { (m|([^/]+)$|) } glob("$source{data}/*") ] : []),
    source       => \%source,
    target       => \%target,
  );

  # partitions == number of crew; could change
  unless ( -d "$c{target}{data}/parts" ) {
    mkdir "$c{target}{data}/parts";
    mkdir "$c{target}{data}/parts/$_" for ( 0 .. $#crew );
  }
  return \%c;
}




# inventory input data for a host
sub justmapsrc {
  inventory(justmapsrc => justmap => @_);
}

sub mappartsrc {
  inventory(mappartsrc => mappart => @_);
}

sub inventory {
  my ($from, $to, %c) = @_;
  my $host = lockone($from, []);
  return unless @$host;
  $host = $host->[0];
  my $files = inventory_host($host, $c{source}{data});
  return unless @$files; # leave source locked, not retired, if no files
  my %found = map {$_=>1} @$files;
  my @files = grep { exists $found{$_} } @{ $c{source}{files} };
  $c{lg}->(0, "registering " . scalar @files . " files from $host\n");		      
  register($to => \@files, $from => $host);
}

# prepare output area on a host
sub target {
  my %c = @_;
  my $host = lockone('target', []);
  return unless @$host;
  $host = $host->[0];
  my $ret = system( "ssh $host 'mkdir -p $c{target}{data}'");
  $c{lg}->(0, "created target repository on $host with retval ".($ret>>8)."\n");
  register( nothing => [], target => $host ) unless $ret; # leave locked if any problem
}

# install execution context and client infrastructure,
# then register launches for the installed host
sub crew {
  my %c = @_;
  my $host = lockone('crew', []);
  return unless @$host;
  $host = $host->[0];
  my $ret = system
    "$ssh $host 'rm -rf $c{target}{data}/client; mkdir -p $c{target}{data}; mkdir -p $c{context}'";
  $c{lg}->(0, "$host unresponsive, ssh returned " .($ret>>8). ". CREW INSTALL FAILED.\n") && return if $ret;

  $ret = system "$scp -r ../client $host\:$c{target}{data}/client";
  $c{lg}->(0, "$host sandbox copy failed; ssh returned " .($ret>>8). ". CREW INSTALL FAILED.\n") && return if $ret;

  $ret = system "$rsync $c{localcontext}/ $host\:$c{context}";
  $c{lg}->(0, "$host exec context rsync failed; ssh returned " .($ret>>8). ". CREW INSTALL FAILED.\n") && return if $ret;
 
  my @processes = map { "$host:$_" } (1..$c{maps});
  register( launch => \@processes, crew => $host ); # register-and-retire
  launch(%c); # bump a launch just for speedy propagation
}

# launch client on the specified host/context
sub launch {
  my %c = @_;
  my $process = lockone('launch', []);
  unless (@$process){
    $c{lg}->(0, "failed to lock one for launch\n");
    return;
  }
  my($host, $pid) = split /:/, $process->[0];
  my $ret = system "$ssh $host \'cd $c{target}{data}/client; perl bin/ttclient $host $pid\'";
  $c{lg}->(0, "launched on $host with exit code " .($ret>>8). ".\n");
  if($ret){
    $c{lg}->(0, "launch on $host failed. Sleeping 5 sec, REVERTING LAUNCH.\n");
    sleep 5;
    statshift( free => launch => $process->[0] );
  } else {
    register( nothing => [], launch => $process->[0] );
  }
}

# kill user operation on the specified host
sub killl {
  my %c = @_;
  my $process = lockone('killl', []);
  return unless @$process;
  my($host, $pid) = split /:/, $process->[0];
  my $ret = system "$ssh $host \'cd $c{target}{data}/client; kill `cat ttclient-$pid.pid`\'";
  $c{lg}->(0, "killed $host : $pid process with exit code " .($ret>>8). ".\n");
  register( nothing => [], killl => $process->[0] ) unless $ret;
  statshift( free => killl => $process->[0] ) if $ret;
}


## map and partition
sub mappart {
  my ($id, $name) = universalmap('mappart', @_);
  return unless $id;

  # partition mapped file
  my %c = @_;
  my $mid_rs = exists $c{mid_rs} ? "TTRS='$c{mid_rs}'" : '';
  system "cat $id-mapped "
         . "| $mid_rs $c{target}{data}/client/bin/zipencode"
         . "| sort -k1,1"
         . "| $c{target}{data}/client/bin/partition $c{target}{data} $name $c{target}{ring} $c{target}{vnodes}";
 
  # register partitions / retire input chunk	
  my @parts = map { (m|/(\d+)/[^/]+$|) } glob("$c{target}{data}/parts/*/$name");
  $c{lg}->( 0, "map'd $id to " . scalar @parts . " parts\n" );
  register( reduce => \@parts, mappart => $name );
  $c{lg}->( 0, "finished mappart task.\n" );
#  unlink "$id-mapped";

  # unlock reduce table if this is the last input chunk
  bump_reduce_table($c{lg});
}


# map without partitioning
sub justmap {
  my ($id, $name) = universalmap('justmap', @_);
  my %c = @_;
  unless($id){
    $c{lg}->(0, "justmap failed, returning\n");
    return;
  }

  # seat mapped file / retire input chunk
  my $chunks = seat( $c{target}, $id, FileHandle->new("<$id-mapped"), $c{thishost} );
  $c{lg}->( 0, "map'd $id to $chunks output chunks\n" );
  register( 'out' => [], justmap => $name );
  $c{lg}->( 0, "finished justmap task.\n" );
  unlink "$id-mapped";
}


sub universalmap {
  my ($tabletype, %c) = @_;
  my $chunk = lockone( $tabletype, $c{localfiles} );
  unless(@$chunk){
    $c{lg}->(0, "lockone($tabletype) failed to return anything useful, universalmap returning undef\n");
    return undef;
  }
  my ( $name, @locations ) = @$chunk;
  my $file = "$c{source}{data}/$name";
  my $id   = substr( $name, 0, 32 );
  my $home = "$c{target}{data}/client"; # u r here
  my $err  = "$home/err/$id";

  unless ( -e $file ) {
    retrieve_foreign( $file, @locations );
    unless (-e "foreign/$name"){
      $c{lg}->(0, "retrieve_foreign() on $name failed, REVERTING $tabletype\n");
      statshift( free => $tabletype => $name );
      sleep int rand(5);
	  return undef;
    }
    $file = "$home/foreign/$name";
  }

  my $catin  = choosestream( $file, $c{source}, "$home/bin/valuethaw" );
  my $src_rs = "TTRS='$c{source}{rs}'";
  my $pipe   =
      "cd $c{context}; "
    . "$catin | $src_rs $c{mapper} 2>$err > $home/$id-mapped";

  my $ret = system $pipe;
  if ($ret) {
    $c{lg}->( 0, "mapped $name with retval " .($ret>>8). ". (Error, REVERTING $tabletype)\n" );
    statshift( free => $tabletype => $name );
    unlink "foreign/$name" if -e "foreign/$name";
    unlink "$id-mapped"    if -e "$id-mapped";
    return undef;
  }
  register_errchunk( $err, $id );
  return ($id, $name);
}

# check to see if all mappart entries are finished. 
# If so, unlock the reduce table.
sub bump_reduce_table {
  my $log = shift;
  my($free,$locked) = object_count('mappart');
  unless($free+$locked){
    $log->(0, "no unfinished 'mappart', time to unlock reduce table\n");
    my $ret = statshift( free => task => 'reduce' )->is_success;
    $log->(0, "unlock of reduce task returned $ret\n");
  }
}

# reduce: For each partition, sort all files in that partition by key, 
# and pipe through the reduce program to a series of segmented
# result files.
sub reduce {
  my %c = @_;
  my $partobj = lockone( 'reduce', [] );
  return unless @$partobj;
  my ( $part, @sources ) = @$partobj;
  $c{lg}->( 0, "locked partition $part\n" );

  my @frags = assemble_fragments( "$c{target}{data}/parts", $part, $c{crew} );
  $c{lg}->( 0, "got " . scalar @frags . " frags from part $part.\n" );

  # verify all fragments are present for this partition
  my ( $missing, $extra ) = compare_sets( \@sources, \@frags );
  if (@$missing) {
    $c{lg}->( 0, scalar @$missing . " fragments missing from part $part (expected ". scalar(@sources) ."). REVERTING.\n");
    statshift( free => reduce => $part );
    statshift( free => mappart => $_ ) for @$missing;
    return 0;    # reexecute the map phase
  }

  my $err = "$c{target}{data}/client/err/$part";
  $c{lg}->( 0, "begin concatenating frags of partition $part\n" );
  if ( my $ret = system "sort -m -k1,1 -o $c{target}{data}/$part-sorted $c{target}{data}/parts/$part/*"){
    $c{lg}->( 0, "Sort returned ".($ret>>8).", REVERTING part $part\n");
    statshift( free => reduce => $part );
    return;
  }
  $c{lg}->( 0, "done concatenating frags of part $part\n" );
  @frags = ("$c{target}{data}/$part-sorted");
  my $cat = "$c{target}{data}/client/bin/rmnulls $c{target}{data}/$part-sorted";
  my $pipe = new FileHandle
    "cd $conf{context}/$conf{proj}; $cat | $conf{reducecmd} 2>$err |";

  my $count = seat( $c{target}, $part, $pipe, $c{thishost} );
  unlink @frags;
  register_errchunk( $err, $part ); # do this before master can exit
  my $rstat = register( out => [], reduce => $part );
  $c{lg}->( 0, "distributed part $part, to $count out chunks, retired with status ".$rstat->code."\n");
}


# map with no input corpus
sub execute {
  my %c   = @_;
  my $env = "TTRS='$c{target}{rs}' TTHOST=$c{thishost}";
  my $id  = md5_hex( $c{thishost} );
  my $err = "$c{target}{data}/client/err/$id";
  unless( statshift( 'lock' => execute => $c{thishost} )->is_success){
    $c{lg}->( 0, "self lock failed on $c{thishost} (me)\n" );
    sleep int rand(5);
    return;
  }

  # unlock this host/proc's entry in case of unrecoverable error
  looseend( 'execute lock',
    sub { register( out => [], execute => $c{thishost} ) } );

  my $pipe   = FileHandle->new("cd $c{context}; $env $c{mapper} 2>$err |");
  my $chunks = seat( $c{target}, $id, $pipe, $c{thishost} );
  register( 'out' => [], execute => $c{thishost} );
  $c{lg}->( 0, "exec finished seating $chunks chunks.\n" );

  register_errchunk( $err, $id );
  $c{lg}->( 0, "finished exec task.\n" );
}


sub register_errchunk {
  my ($errfile, $id) = @_;
  my $errbytes = -s $errfile;
  if($errbytes){
    rename $errfile, "$errfile.1.$errbytes"; # one record per chunk
    register('err' => [ "$id.1.$errbytes" ]);
  } else {
    unlink $errfile;
  }
}

sub compare_sets {
  my($left, $right) = @_;
  my %left  = map { $_ => 1 } @$left;
  my %right = map { $_ => 1 } @$right;

  for (@$right){
    if(exists $left{$_}){
      delete $left{$_};
      delete $right{$_};
    }
  }
  my @left  = keys %left;
  my @right = keys %right;
  return(\@left, \@right);
}


# return a list of free $type items, 
# block until there are free items,
# return empty when there are no free or locked items.
sub freelist {
  my $type = shift;
  my $log = logger("freelist on $type");
  my $sleepytime = 0;

  while (1) {
    my ( $free, $locked ) = object_count($type);
    $log->(0, "no '$type' objex, exiting freelist\n") && return () 
      unless $free or $locked;
    if ($free) {
      $log->( 0, "$free free / $locked locked '$type' objex\n" );
      my @free = object_count( $type, 0 );    # zero means status "FREE"
      return @free if @free;
    }
    $log->( 0, "$free free / $locked locked objex, sleeping " . 2**$sleepytime . " seconds\n");
    sleep $sleepytime**2;
    $sleepytime++ unless $sleepytime >= 3;    # 8 seconds to sleep, max
  }
}

# lock a single item,
# return empty if there are no free available,
# prefer items from $list
sub lockone {
  my ($type, $local) = @_;
  my ($free) = object_count($type);
  return [] unless $free;
  while(@$local){
    my $name = shift @$local;
    next unless statshift('lock' => $type => $name)->is_success;
    return [ $name ];
  }
  my @free = object_count($type, 0);
  while(@free){
    my $obj = shift @free;
    next unless statshift('lock' => $type => $obj->[0])->is_success;
    return $obj;
  }
  return []; 
}


# Retrieve a foreign input file to the local drive
sub retrieve_foreign {
  my($file, @hosts) = @_;
  for (@hosts){
    last unless system "$scp $_\:$file foreign/.";
  }
}

# gather fragments from hosts in randomized order
sub assemble_fragments {
  my ( $dir, $part, $hosts ) = @_;
  my @hosts = @$hosts;
  my $ihosts = fyshuffle( $part, scalar @hosts );
  mkdir "$dir/$part" unless -d "$dir/$part";
  for my $i (@$ihosts) {
    system "$scp $hosts[$i]:$dir/$part/* $dir/$part/. 2>/dev/null";
  }
  my @parts = map { (m|([^/]+)$|) } glob("$dir/$part/*");
  return @parts;
}

# place a result on some responsible hosts
sub distribute {
  my($thishost, $file, $target) = @_;
  my %target = %$target;
  my $dest = "$target{repos}/$target{nodename}/$file";
  my $log = logger("$thishost distribute");
  my $preflist = preflist( substr($file,0,32), hashring($target{vnodes}, $target{hosts}) );
  
  my $fway = $target{replicate};
  $fway = @$preflist if (@$preflist < $fway); # can't replicate more than there are hosts
  
  my $copies = 0;
  for my $host (@$preflist){
    last if $copies >= $fway;
    my $ret = system "$scp $file $host:$dest";
    if($ret){
      $log->(0, "could not copy to $host (". ($ret>>8) .")\n");
    } else {
      $log->(0, "copied to $host\n");
      $copies++;
    }
  }
  unlink $file;
  return undef unless $copies;
  return 1;
}


# fisher-yates shuffle returns indices for an array of $size elements.
# produces same shuffle with same seed.
sub fyshuffle {
  my( $seed, $size ) = @_;
  my $array = [ 0..$size-1 ];
  srand($seed);
  my $i;
  for ( $i = @$array ; --$i ; ) {
    my $j = int rand( $i + 1 );
    next if $i == $j;
    @$array[ $i, $j ] = @$array[ $j, $i ];
  }
  return $array;
}

sub seat {
  my($conf) = @_;
  if($conf->{format} eq 'txt'){ return seatstream(@_); }
  else                        { return seatparts(@_); }
}

# seat a stream of data to a flat record corpus
sub seatstream {
  my ( $conf, $sig, $fd, $thishost ) = @_;
  my %conf = %$conf;
  my $rs   = $conf{rs};
  my @hosts = @{ $conf{hosts} };

  $rs = eval $rs if ( $rs =~ /^["']/ );
  local $/ = $rs if $rs;
  my $digest = Digest::MD5->new;
  my ( $outfd, $records, $bytes );
  my $chunks = 0;
  my $log = logger("$thishost seatstream");

  # begin a new output file
  my $startoutfile = sub {
    my $stream = (exists $conf->{uncompress} ? '' : '|gzip');
    $outfd   = new FileHandle "$stream>$sig-out" or fatal($!);
    $bytes   = 0;
    $records = 0;
  };

  # do this when enough has been output
  my $endoutfile = sub {
    $outfd->close;
    $digest->addfile( new FileHandle "<$sig-out" );
    my $chunkname = $digest->hexdigest .".$records.$bytes";
    rename "$sig-out", $chunkname;
    $chunks++;
    if ($bytes > 0){ 
      distribute($thishost, $chunkname, \%conf);
      my $rstat = register( out => [ $chunkname ] );
      $log->( 0, "distributed $chunks th chunk, registered with status " . $rstat->code . "\n");
    } else { 
      my $rstat = register( out => [ $chunkname ] );
      $log->( 0, "$chunks th chunk empty, not distributing, registered with status " . $rstat->code . "\n");
      unlink $chunkname; 
    }
  };

  $startoutfile->();
  while (<$fd>) {
    if ( $bytes and ( ($bytes + length($_)) > $conf{chunksize} 	) ) {
      $endoutfile->();
      $startoutfile->();
    }
    $bytes += length $_;
    print $outfd $_ or fatal($!);
    $records++;
  }
  $endoutfile->();
  return $chunks;
}


# seat a sorted stream of data to a key-value corpus
sub seatparts {
  my ( $conf, $sig, $fd, $thishost ) = @_;
  my %conf = %$conf;
  my $rs   = $conf{rs};
  my @hosts = @{ $conf{hosts} };

  $rs = eval $rs if ( $rs =~ /^["']/ );
  local $/ = $rs if $rs;
  my ( $db, $outhandle, $records, $bytes );
  my $chunks = 0;
  my $log = logger("$thishost seatparts");
  my @hashring = @{ hashring($conf{vnodes}, \@hosts) };
  push @hashring, [ 'f' x 32, $hashring[0]->[1] ]; # add highest val vnode

  # begin a new output file
  my $startoutfile = sub {
    $db = radschunk("$sig-out"); 
    $outhandle = $db->prepare('insert into kv (k,v) values (?,?)');
    $bytes   = 0;
    $records = 0;
  };

  # do this when enough has been output
  my $endoutfile = sub {
    $db->commit;
    undef $outhandle;
    $db->disconnect;
    $log->(0, "closing out vnode for host ".$hashring[0]->[1]."\n");
    my $chunkname = $hashring[0]->[0] .".$records.$bytes";
    rename "$sig-out", $chunkname;
    $chunks++;
    if ($bytes > 0){ 
      distribute($thishost, $chunkname, \%conf);
      my $rstat = register( out => [ $chunkname ] );
      $log->( 0, "distributed chunk $chunks ($chunkname), registered with status " . $rstat->code . "\n");
    } else { 
#      my $rstat = register( out => [ $chunkname ] );
#      $log->( 0, "$chunks th chunk empty, not distributing, registered with status " . $rstat->code . "\n");
      unlink $chunkname; 
    }
  };

  $startoutfile->();
  while (<$fd>) {
    my ($key) = (m|^([^\t]+)|);
	$key = ($key =~ /^[a-f\d]{32}$/i) ? lc($key) : md5_hex($key);
    fatal("Hashring somehow empty at key $key") unless @hashring;
    if($key gt $hashring[0]->[0]){
      $endoutfile->();
      $startoutfile->();
      while(@hashring and ($key gt $hashring[0]->[0])){
        shift @hashring;
      }
      $log->(0, "found next vnode ".$hashring[0]->[0]." gt record $key\n");
    }
    $bytes += length $_;
	#s/\n$//s; # hack to compensate for sqlite3 appending \n to everything
    $outhandle->execute($key, valuefreeze(\$_)) or fatal($!);
    $records++;
  }
  $endoutfile->();
  return $chunks;
}

# compress/remove null and newline/cr from record
sub valuefreeze {
  my $ptr = shift;
  my $z = Compress::LZO::compress($$ptr);
  $z = (defined $z and length($z)<length($$ptr)) ? 'C'.$z : 'U'.$$ptr;
  $z =~ tr[\326-\377\000-\325][\000-\377];
  $z =~ s/([\0\n\r=])/'='.chr(ord($1)+64 & 255)/egosx;
  return $z;
}

# loose ends list
{
  my %loose = ();
  my $log;
  sub looseend {
    $log = logger("fatal error cleanup") unless $log;
    my($key, $sub) = @_;
    $log->(0, "registered '$key'\n");
    $loose{$key} = $sub;
  }
  sub fatal {
    while(my($k,$s) = each %loose){
      $log->("cleaning up $k\n");
      $s->();
    }
    exit @_;
  }
}

sub daemonize {
  my($machine, $cpu) = @_; 
  open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
  my $logname = md5_hex("$machine:$cpu") . ".1.0";
  open STDOUT, ">log/$logname" or die "Can't write to client/log: $!";
  defined(my $pid = fork) or die "Can't fork: $!";
  exit if $pid;
  setsid                  or die "Can't start a new session: $!";
  open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
  $|=1; # unbuffer 
}

