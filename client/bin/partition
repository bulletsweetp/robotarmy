#!/usr/bin/perl -w
use strict;

use FileHandle;
use Digest::MD5 qw( md5 );
use Getopt::Long;

# set the input record separator
$/ = $ENV{TTRS} if exists $ENV{TTRS};
$/ = eval $/ if $/ =~ /^['"]/;

my ($path, $sig, $cluster) = splice @ARGV, 0, 3;

my $hosts = readlist("$path/client/clusters/$cluster/.hosts");
chomp @$hosts;
hashring(1, $hosts);

my @table;
while(<>){
  my ($key) = split /\t/;
  next unless defined $key;
  my $part = keyindex($key);

  $table[$part] ||=
    new FileHandle ">$path/parts/$part/$sig" 
      or die $!;

  $table[$part]->print($_);
}

for (0..$#table){
  $table[$_]->close if defined $table[$_];
}

exit 0;



{
  my @ring = ();

  # create a continuum from a list of items; make $vnodes virtual nodes per item
  sub hashring {
    my ($vnodes, $list) = @_;
	my @list = @$list;
    for my $i (0..$#list){
      my $item = $list[$i];
      push @ring, [ md5("$item:$_"), $i ] for (1..$vnodes);
    }
    @ring = sort { $a->[0] cmp $b->[0] } @ring;
  }

#  # given a key and the consistent-hash ring, return the index of the responsible slot
# smarter search, via brad via rj
sub keyindex {
  my ($key) = @_;
  my $keyhash = md5($key);

  my $zeroval = pack("B*", '0' x 128); # "null md5"
  my ($lo, $hi) = (0, $#ring);

  while (1) {
    my $mid           = int(($lo + $hi) / 2);
    my $val_at_mid    = $ring[$mid]->[0];
    my $val_one_below = $mid ? $ring[$mid-1]->[0] : $zeroval;

    # match
    return $ring[$mid]->[1] if
      $keyhash le $val_at_mid && $keyhash gt $val_one_below;

    # wrap-around match
    return $ring[$mid]->[1] if $lo == $hi;

    # too low, go up.
    if ($val_at_mid lt $keyhash) {
      $lo = $mid + 1;
      $lo = $hi if $lo > $hi;
    }
    # too high
    else {
      $hi = $mid - 1;
      $hi = $lo if $hi < $lo;
    }
  }
}

}


sub readlist {
  my $fname = shift;
  return [] unless -e $fname; 
  my @list     = ();
  open F, "<$fname";
  while (<F>) {
    chomp;
    s/\r//;
    next unless $_;
    next if /^#/;
    push @list, $_;
  }
  return \@list;
}

