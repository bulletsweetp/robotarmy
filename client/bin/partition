#!/usr/bin/perl -w
use strict;

use FileHandle;
use Digest::MD5 qw( md5_hex );
use constant KEY    => 0;
use constant PART   => 1;

# set the input record separator
$/ = $ENV{TTRS} if exists $ENV{TTRS};
$/ = eval $/ if $/ =~ /^['"]/;

my ($path, $sig, $ring, $vnodes) = splice @ARGV, 0, 4;

my $hosts = readlist("$path/client/clusters/$ring/.hosts");
chomp @$hosts;

my @hashring;
my $part = 0;
for my $i ( 0 .. scalar(@$hosts)-1 ){
  my $host = $hosts->[$i];
  push @hashring, [ md5_hex("$host:$_"), $part++ ] for (1..5);
}
@hashring = sort { $a->[0] cmp $b->[0] } @hashring;
push @hashring, [ 'f' x 32, $part ]; # wrap highest value node


my ($fd, $records, $bytes);

my $startoutfile = sub {
  $part = $hashring[0]->[PART];
  mkdir "$path/parts/$part" unless -d "$path/parts/$part";
  $fd      = FileHandle->new(">$path/parts/$part/$sig");
  $records = 0;
  $bytes   = 0;
};

my $endoutfile = sub {
  my $chunkname = $hashring[0]->[0] . ".$records.$bytes";
  $fd->close;
  rename "$sig-out", $chunkname;
  unlink $chunkname unless ( $bytes > 0 );
};

$startoutfile->();
while (<>) {
  my ($key) = split /\t/;
  next                                      unless defined $key;
  next                                      unless $key =~ /^[a-f\d]{32}$/i;
  die("Hashring somehow empty at key $key") unless @hashring;
  if ( $key gt $hashring[0]->[KEY] ) {
    $endoutfile->();
    while ( @hashring and ( $key gt $hashring[0]->[KEY] ) ) {
      shift @hashring;
    }
    $startoutfile->();
  }
  $bytes += length $_;
  $fd->print($_);
  $records++;
}
$endoutfile->();

exit 0;




sub readlist {
  my $fname = shift;
  local $/ = "\n";
  return [] unless -e $fname; 
  my @list     = ();
  open F, "<$fname";
  while (<F>) {
    chomp;
    s/\r//;
    next unless $_;
    next if /^#/;
    push @list, $_;
  }
  return \@list;
}








