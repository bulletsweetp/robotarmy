
Examples of "PROPERLY DAEMONIZING" in Perl.

This example uses flock() to ensure only one instance of this program runs as a daemon
   2  use File::Basename;
   3  use Fcntl qw(LOCK_EX LOCK_NB);
   4  use strict;
   5  
   6  my $ProgramName = basename($0);
   7  
   8  open(SELFLOCK, "<$0") or die("Couldn't open $0: $!\n");
   9  flock(SELFLOCK, LOCK_EX | LOCK_NB) or die("Aborting: another $ProgramName is already running\n");
  10  
  11  # Do any necessary preliminary checks (e.g. check a config file)
  12  
  13  # Get ready to daemonize by redirecting our output to syslog, requesting that logger prefix the lines with our program name:
  14  open(STDOUT, "|-", "logger -t $ProgramName") or die("Couldn't open logger output stream: $!\n");
  15  open(STDERR, ">&STDOUT") or die("Couldn't redirect STDERR to STDOUT: $!\n");
  16  $| = 1; # Make output line-buffered so it will be flushed to syslog faster
  17  
  18  chdir('/'); # Avoid the possibility of our working directory resulting in keeping an otherwise unused filesystem in use
  19  
  20  # Double-fork to avoid leaving a zombie process behind:
  21  exit if (fork());
  22  exit if (fork());
  23  sleep 1 until getppid() == 1;
  24  
  25  print "$ProgramName $$ successfully daemonized\n";
  26  
  27  # do something useful


or from perlipc:
   1  
   2             use POSIX 'setsid';
   3  
   4             sub daemonize {
   5                 chdir '/'               or die "Can't chdir to /: $!";
   6                 open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
   7                 open STDOUT, '>/dev/null'
   8                                         or die "Can't write to /dev/null: $!";
   9                 defined(my $pid = fork) or die "Can't fork: $!";
  10                 exit if $pid;
  11                 setsid                  or die "Can't start a new session: $!";
  12                 open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
  13             }

